from google.adk import Agent
from google.adk.tools.agent_tool import AgentTool
from google.genai import types

import time

import subprocess
import os
import json

MODEL = "gemini-2.5-flash"

# ------- original directory pathing (with CSPL repo inside GoogleSprinternship/with_subagents/main_agent ???? or just subagents)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
CLOUDSPLOIT_DIR = os.path.join(PROJECT_ROOT, "cloudsploit_refactored_tools")
CLOUDSPLOIT_INDEX_JS_PATH = os.path.join(CLOUDSPLOIT_DIR, "index.js")
# ------- 

# ------- new directory pathing (with environment variables)
# # Reads path to CloudSploit directory from environment variable
# CLOUDSPLOIT_DIR = os.environ.get("CLOUDSPLOIT_TOOL_PATH")

# # Checks if user forgot to set environment variable
# if not CLOUDSPLOIT_DIR:
#     raise EnvironmentError(
#         "Configuration Error: The 'CLOUDSPLOIT_TOOL_PATH' environment variable is not set. "
#         "Please set it to the absolute path of your 'cloudsploit_refactored_tools' directory."
#     )

# # Construct full path to index.js entry point from provided directory
# CLOUDSPLOIT_INDEX_JS_PATH = os.path.join(CLOUDSPLOIT_DIR, "index.js")

# # optional path to node executable in case "node" doesn't work in the command
# NODE_COMMAND = os.environ.get("NODE_EXECUTABLE_PATH", "node")

# ------- 

def scan_vulnerabilities(config_file_path: str) -> dict:
    """
    Executes a comprehensive Google Cloud vulnerability scan (CloudSploit), running all available plugins.

    Args: config_file_path -> The absolute path to the config.js file for the scanner.

    Returns: A dict containing status (fail or success) and 
                response (JSON string containing the formatted scan results or an error message).
    """

    #early error checks
    if not CLOUDSPLOIT_DIR:
        return {
            "status": "fail",
            "response": "Configuration Error: The 'CLOUDSPLOIT_TOOL_PATH' environment variable is not set."
        }
    
    if not os.path.exists(config_file_path):
        return {
            "status": "fail",
            "response": f"Configuration Error: The provided config file was not found at '{config_file_path}'."
        }

    try:
        # Construct command
        command = [
            "node", #or NODE_COMMAND
            CLOUDSPLOIT_INDEX_JS_PATH,
            "--config", config_file_path
        ]

        # Run the command
        process = subprocess.run(
            # GCP environment variables (set by Node.js)
            command,
            cwd=CLOUDSPLOIT_DIR,
            capture_output=True,
            text=True,
            check=True
        )

        # The CloudSploit script outputs JSON when --json is used
        output = process.stdout.strip()

        # Since the script outputs informational logs before the JSON, we need to find the JSON.
        json_start_index = output.find('{')
        if json_start_index == -1:
             return {
                "status": "fail",
                "response": f"Scanner Execution Error: The script ran but produced no JSON output. Raw output: {output}"
            }
        
        # successful scan
        try:
            json_output = output[json_start_index:]
            scan_results = json.loads(json_output)
            return {
                "status": "success",
                "response": scan_results
            }
        except json.JSONDecodeError:
            return {
                "status": "fail",
                "response": f"Scanner Execution Error: Could not parse JSON from script output. Raw output: {output}"
            }
            
    #fail paths
    except FileNotFoundError:
        return {
            "status": "fail",
            "response": "Environment Error: 'node' command not found. Please ensure Node.js is installed and in your system's PATH."
        }
    except subprocess.CalledProcessError as e: #scanner script itself failed
        return {
            "status": "fail",
            "response": (f"Scanner Execution Error: The script failed with exit code {e.returncode}.\n"
                         f"Error Details: {e.stderr.strip()}")
        }
    except Exception as e:
        return {
            "status": "fail",
            "response": f"An unexpected Python error occurred: {str(e)}"
        }

vulnerability_agent = Agent(
    name="vulnerability_agent",
    model=MODEL,
    description="Scan for vulnerabilities in a project.",
    instruction="You are a helpful agent that specializes in identifying vulnerabilities in a Google Cloud project." 
                # "Your job is to identify the user's project name."
                # "Ask if the user wants to remediate the vulnerabilities."
                # "ALWAYS warn the user about remediating, and always ask for confirmation."
                # "Pass the project name into scan_vulnerabilities as a parameter."
                "Call the scan_vulnerabilities. Do not be creative."
                "Only print what the function returns, but format it in a readable way.",
    tools=[scan_vulnerabilities],
)